// Code generated by baton-sdk.go DO NOT EDIT.
package main

import "reflect" 

type BitbucketConfig struct {
	Username string `mapstructure:"username"`
	AppPassword string `mapstructure:"app-password"`
	Token string `mapstructure:"token"`
	ConsumerKey string `mapstructure:"consumer-key"`
	ConsumerSecret string `mapstructure:"consumer-secret"`
	Workspaces []string `mapstructure:"workspaces"`
}

func (c* BitbucketConfig) findFieldByTag(key string) any {
	// Get the type of the object
	v := reflect.ValueOf(c)
	t := reflect.TypeOf(c)

	// Iterate through struct fields
	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i) // Get the field
		tag := field.Tag.Get("mapstructure")
		if tag == key {
			return v.Field(i).Interface()
		}
	}
	panic("could not find it")
}


func (c *BitbucketConfig) GetStringSlice(fieldName string) []string {
	v := c.findFieldByTag(fieldName)
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *BitbucketConfig) GetString(fieldName string) string {
	v := c.findFieldByTag(fieldName)
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *BitbucketConfig) GetInt(fieldName string) int {
	v := c.findFieldByTag(fieldName)
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *BitbucketConfig) GetBool(fieldName string) bool {
	v := c.findFieldByTag(fieldName)
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}
