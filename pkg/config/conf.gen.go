// Code generated by baton-sdk. DO NOT EDIT!!!
package config

import "reflect" 

type Bitbucket struct {
	Username string `mapstructure:"username"`
	AppPassword string `mapstructure:"app-password"`
	Token string `mapstructure:"token"`
	ConsumerKey string `mapstructure:"consumer-key"`
	ConsumerSecret string `mapstructure:"consumer-secret"`
	Workspaces []string `mapstructure:"workspaces"`
}

func (c* Bitbucket) findFieldByTag(tagValue string) (any, bool) {
	v := reflect.ValueOf(c).Elem() // Dereference pointer to struct
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		tag := field.Tag.Get("mapstructure")

		if tag == tagValue {
			return v.Field(i).Interface(), true
		}
	}
	return nil, false
}



func (c *Bitbucket) GetStringSlice(fieldName string) []string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		panic("could not find field by tag")
	}
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Bitbucket) GetString(fieldName string) string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		panic("could not find field by tag")
	}
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Bitbucket) GetInt(fieldName string) int {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		panic("could not find field by tag")
	}
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Bitbucket) GetBool(fieldName string) bool {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		panic("could not find field by tag")
	}
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}
